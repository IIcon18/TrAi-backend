from fastapi import FastAPI
from app.api.router import api_router
from app.core.db import engine, Base
from sqlalchemy import text
import asyncio

# –Ø–≤–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã –∫–∞–∂–¥–æ–π –º–æ–¥–µ–ª–∏
from app.models.user import User
from app.models.goal import Goal, UserGoal
from app.models.workout import Workout
from app.models.meal import Meal
from app.models.progress import Progress
from app.models.workout_test import WorkoutTest

app = FastAPI(title="TrAi - your personal training intelligence")

app.include_router(api_router)


async def init_database():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î"""
    print("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –ë–î...")

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    print(f"üìã –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã: {list(Base.metadata.tables.keys())}")

    if not Base.metadata.tables:
        print("‚ùå –ù–ï–¢ –ó–ê–†–ï–ì–ò–°–¢–†–ò–†–û–í–ê–ù–ù–´–• –¢–ê–ë–õ–ò–¶!")
        return

    async with engine.begin() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –î–û —Å–æ–∑–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ run_sync
        def check_tables_sync(conn_sync):
            from sqlalchemy import inspect
            inspector = inspect(conn_sync)
            existing_tables = inspector.get_table_names()
            print(f"üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –î–û —Å–æ–∑–¥–∞–Ω–∏—è: {existing_tables}")
            return existing_tables

        existing_tables = await conn.run_sync(check_tables_sync)

        # –°–æ–∑–¥–∞–µ–º –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã
        await conn.run_sync(Base.metadata.create_all)
        print("‚úÖ –¢–∞–±–ª–∏—Ü—ã –ë–î —Å–æ–∑–¥–∞–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è
        def check_tables_after_sync(conn_sync):
            from sqlalchemy import inspect
            inspector = inspect(conn_sync)
            new_tables = inspector.get_table_names()
            print(f"üìä –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ü–û–°–õ–ï —Å–æ–∑–¥–∞–Ω–∏—è: {new_tables}")
            return new_tables

        new_tables = await conn.run_sync(check_tables_after_sync)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
        result = await conn.execute(text("SELECT 1"))
        print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")


@app.on_event("startup")
async def startup_event():
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    await init_database()
    print("üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ!")


@app.get("/")
async def root():
    return {"message": "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TrAi!"}